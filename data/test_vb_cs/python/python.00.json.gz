{"repo_name":"tsdl2013/roslyn","ref":"refs/heads/master","path":"src/Samples/VisualBasic/Analyzers/BasicAnalyzers/BasicAnalyzers/StatefulAnalyzers/CompilationStartedAnalyzerWithCompilationWideAnalysis.vb","copies":"73","content":"ï»¿' Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\n\nImports My.Resources\n\nNamespace BasicAnalyzers\n    ''' \u003csummary\u003e\n    ''' Analyzer to demonstrate compilation-wide analysis.\n    ''' \u003cpara\u003e\n    ''' Analysis scenario:\n    ''' (a) You have an interface, which is a well-known secure interface, i.e. it is a marker for all secure types in an assembly.\n    ''' (b) You have a method level attribute which marks the owning method as unsecure. An interface which has any member with such an attribute, must be considered unsecure.\n    ''' (c) We want to report diagnostics for types implementing the well-known secure interface that also implement any unsecure interface.\n    ''' \n    ''' Analyzer performs compilation-wide analysis to detect such violating types and reports diagnostics for them in the compilation end action.\n    ''' \u003c/para\u003e\n    ''' \u003cpara\u003e\n    ''' The analyzer performs this analysis by registering:\n    ''' (a) A compilation start action, which initializes per-compilation state:\n    '''     (i) Immutable state: We fetch and store the type symbols for the well-known secure interface type and unsecure method attribute type in the compilation.\n    '''     (ii) Mutable state: We maintain a set of all types implementing well-known secure interface type and set of all interface types with an unsecure method.\n    ''' (b) A compilation symbol action, which identifies all named types that implement the well-known secure interface, and all method symbols that have the unsecure method attribute.\n    ''' (c) A compilation end action which reports diagnostics for types implementing the well-known secure interface that also implementing any unsecure interface.\n    ''' \u003c/para\u003e\n    ''' \u003c/summary\u003e\n    \u003cDiagnosticAnalyzer(LanguageNames.VisualBasic)\u003e\n    Public Class CompilationStartedAnalyzerWithCompilationWideAnalysis\n        Inherits DiagnosticAnalyzer\n\n#Region \"Descriptor fields\"\n        Friend Shared ReadOnly Title As LocalizableString = New LocalizableResourceString(NameOf(Resources.CompilationStartedAnalyzerWithCompilationWideAnalysisTitle), Resources.ResourceManager, GetType(Resources))\n        Friend Shared ReadOnly MessageFormat As LocalizableString = New LocalizableResourceString(NameOf(Resources.CompilationStartedAnalyzerWithCompilationWideAnalysisMessageFormat), Resources.ResourceManager, GetType(Resources))\n        Friend Shared ReadOnly Description As LocalizableString = New LocalizableResourceString(NameOf(Resources.CompilationStartedAnalyzerWithCompilationWideAnalysisDescription), Resources.ResourceManager, GetType(Resources))\n\n        Friend Shared Rule As New DiagnosticDescriptor(DiagnosticIds.CompilationStartedAnalyzerWithCompilationWideAnalysisRuleId, Title, MessageFormat, DiagnosticCategories.Stateful, DiagnosticSeverity.Warning, isEnabledByDefault:=True, description:=Description)\n#End Region\n\n        Friend Const UnsecureMethodAttributeName As String = \"MyNamespace.UnsecureMethodAttribute\"\n        Friend Const SecureTypeInterfaceName As String = \"MyNamespace.ISecureType\"\n\n        Public Overrides ReadOnly Property SupportedDiagnostics() As ImmutableArray(Of DiagnosticDescriptor)\n            Get\n                Return ImmutableArray.Create(Rule)\n            End Get\n        End Property\n\n        Public Overrides Sub Initialize(context As AnalysisContext)\n            context.RegisterCompilationStartAction(\n                Sub(compilationContext)\n                    ' Check if the attribute type marking unsecure methods is defined.\n                    Dim unsecureMethodAttributeType = compilationContext.Compilation.GetTypeByMetadataName(UnsecureMethodAttributeName)\n                    If unsecureMethodAttributeType Is Nothing Then\n                        Return\n                    End If\n\n                    ' Check if the interface type marking secure types is defined.\n                    Dim secureTypeInterfaceType = compilationContext.Compilation.GetTypeByMetadataName(SecureTypeInterfaceName)\n                    If secureTypeInterfaceType Is Nothing Then\n                        Return\n                    End If\n\n                    ' Initialize state in the start action.\n                    Dim analyzer = New CompilationAnalyzer(unsecureMethodAttributeType, secureTypeInterfaceType)\n\n                    ' Register an intermediate non-end action that accesses and modifies the state.\n                    compilationContext.RegisterSymbolAction(AddressOf analyzer.AnalyzeSymbol, SymbolKind.NamedType, SymbolKind.Method)\n\n                    ' Register an end action to report diagnostics based on the final state.\n                    compilationContext.RegisterCompilationEndAction(AddressOf analyzer.CompilationEndAction)\n                End Sub)\n        End Sub\n\n        Private Class CompilationAnalyzer\n\n#Region \"Per-Compilation immutable state\"\n            Private ReadOnly _unsecureMethodAttributeType As INamedTypeSymbol\n            Private ReadOnly _secureTypeInterfaceType As INamedTypeSymbol\n#End Region\n\n#Region \"Per-Compilation mutable state\"\n            ''' \u003csummary\u003e\n            ''' List of secure types in the compilation implementing interface \u003csee cref=\"SecureTypeInterfaceName\"/\u003e.\n            ''' \u003c/summary\u003e\n            Private _secureTypes As List(Of INamedTypeSymbol)\n\n            ''' \u003csummary\u003e\n            ''' Set of unsecure interface types in the compilation that have methods with an attribute of \u003csee cref=\"_unsecureMethodAttributeType\"/\u003e.\n            ''' \u003c/summary\u003e\n            Private _interfacesWithUnsecureMethods As HashSet(Of INamedTypeSymbol)\n#End Region\n\n#Region \"State intialization\"\n            Public Sub New(unsecureMethodAttributeType As INamedTypeSymbol, secureTypeInterfaceType As INamedTypeSymbol)\n                _unsecureMethodAttributeType = unsecureMethodAttributeType\n                _secureTypeInterfaceType = secureTypeInterfaceType\n\n                _secureTypes = Nothing\n                _interfacesWithUnsecureMethods = Nothing\n            End Sub\n#End Region\n\n#Region \"Intermediate actions\"\n            Public Sub AnalyzeSymbol(context As SymbolAnalysisContext)\n                Select Case context.Symbol.Kind\n                    Case SymbolKind.NamedType\n                        ' Check if the symbol implements \"_secureTypeInterfaceType\".\n                        Dim namedType = DirectCast(context.Symbol, INamedTypeSymbol)\n                        If namedType.AllInterfaces.Contains(_secureTypeInterfaceType) Then\n                            _secureTypes = If(_secureTypes, New List(Of INamedTypeSymbol)())\n                            _secureTypes.Add(namedType)\n                        End If\n\n                        Exit Select\n\n                    Case SymbolKind.Method\n                        ' Check if this is an interface method with \"_unsecureMethodAttributeType\" attribute.\n                        Dim method = DirectCast(context.Symbol, IMethodSymbol)\n                        If method.ContainingType.TypeKind = TypeKind.Interface AndAlso\n                            method.GetAttributes().Any(Function(a) a.AttributeClass.Equals(_unsecureMethodAttributeType)) Then\n                            _interfacesWithUnsecureMethods = If(_interfacesWithUnsecureMethods, New HashSet(Of INamedTypeSymbol)())\n                            _interfacesWithUnsecureMethods.Add(method.ContainingType)\n                        End If\n\n                        Exit Select\n                End Select\n            End Sub\n#End Region\n\n#Region \"End action\"\n            Public Sub CompilationEndAction(context As CompilationAnalysisContext)\n                If _interfacesWithUnsecureMethods Is Nothing OrElse _secureTypes Is Nothing Then\n                    ' No violating types.\n                    Return\n                End If\n\n                ' Report diagnostic for violating named types.\n                For Each secureType In _secureTypes\n                    For Each unsecureInterface In _interfacesWithUnsecureMethods\n                        If secureType.AllInterfaces.Contains(unsecureInterface) Then\n                            Dim diag = Diagnostic.Create(Rule, secureType.Locations(0), secureType.Name, SecureTypeInterfaceName, unsecureInterface.Name)\n                            context.ReportDiagnostic(diag)\n                            Exit For\n                        End If\n                    Next\n                Next\n            End Sub\n#End Region\n\n        End Class\n    End Class\nEnd Namespace\n"}
{"repo_name":"deaspo/Instat","ref":"refs/heads/mruFiles","path":"instat/My Project/Settings.Designer.vb","copies":"8","content":"'------------------------------------------------------------------------------\n' \u003cauto-generated\u003e\n'     This code was generated by a tool.\n'     Runtime Version:4.0.30319.42000\n'\n'     Changes to this file may cause incorrect behavior and will be lost if\n'     the code is regenerated.\n' \u003c/auto-generated\u003e\n'------------------------------------------------------------------------------\n\nOption Strict On\nOption Explicit On\n\n\nNamespace My\n\n    \u003cGlobal.System.Runtime.CompilerServices.CompilerGeneratedAttribute(), _\n     Global.System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"11.0.0.0\"), _\n     Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)\u003e _\n    Partial Friend NotInheritable Class MySettings\n        Inherits Global.System.Configuration.ApplicationSettingsBase\n\n        Private Shared defaultInstance As MySettings = CType(Global.System.Configuration.ApplicationSettingsBase.Synchronized(New MySettings), MySettings)\n\n#Region \"My.Settings Auto-Save Functionality\"\n#If _MyType = \"WindowsForms\" Then\n        Private Shared addedHandler As Boolean\n\n        Private Shared addedHandlerLockObject As New Object\n\n        \u003cGlobal.System.Diagnostics.DebuggerNonUserCodeAttribute(), Global.System.ComponentModel.EditorBrowsableAttribute(Global.System.ComponentModel.EditorBrowsableState.Advanced)\u003e _\n        Private Shared Sub AutoSaveSettings(ByVal sender As Global.System.Object, ByVal e As Global.System.EventArgs)\n            If My.Application.SaveMySettingsOnExit Then\n                My.Settings.Save()\n            End If\n        End Sub\n#End If\n#End Region\n\n        Public Shared ReadOnly Property [Default]() As MySettings\n            Get\n\n#If _MyType = \"WindowsForms\" Then\n                   If Not addedHandler Then\n                        SyncLock addedHandlerLockObject\n                            If Not addedHandler Then\n                                AddHandler My.Application.Shutdown, AddressOf AutoSaveSettings\n                                addedHandler = True\n                            End If\n                        End SyncLock\n                    End If\n#End If\n                Return defaultInstance\n            End Get\n        End Property\n    End Class\nEnd Namespace\n\nNamespace My\n\n    \u003cGlobal.Microsoft.VisualBasic.HideModuleNameAttribute(), _\n     Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _\n     Global.System.Runtime.CompilerServices.CompilerGeneratedAttribute()\u003e _\n    Friend Module MySettingsProperty\n\n        \u003cGlobal.System.ComponentModel.Design.HelpKeywordAttribute(\"My.Settings\")\u003e _\n        Friend ReadOnly Property Settings() As Global.instat.My.MySettings\n            Get\n                Return Global.instat.My.MySettings.Default\n            End Get\n        End Property\n    End Module\nEnd Namespace\n"}
{"repo_name":"danucalovj/mRemoteNG-src","ref":"refs/heads/master","path":"mRemoteV1/Forms/frmMain.vb","copies":"1","content":"Imports WeifenLuo.WinFormsUI.Docking\nImports mRemoteNG.App.Runtime\nImports System.Reflection\nImports System.Runtime.InteropServices\nImports Crownwood\nImports mRemoteNG.App.Native\nImports PSTaskDialog\nImports mRemoteNG.Config\nImports mRemoteNG.Themes\n\nPublic Class frmMain\n    Private _previousWindowState As FormWindowState\n    Public Property PreviousWindowState As FormWindowState\n        Get\n            Return _previousWindowState\n        End Get\n        Set(value As FormWindowState)\n            _previousWindowState = value\n        End Set\n    End Property\n    Public Shared Event clipboardchange()\n    Private fpChainedWindowHandle As IntPtr\n\n#Region \"Properties\"\n    Private _isClosing As Boolean = False\n    Public ReadOnly Property IsClosing() As Boolean\n        Get\n            Return _isClosing\n        End Get\n    End Property\n#End Region\n\n#Region \"Startup \u0026 Shutdown\"\n    Private Sub frmMain_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n        MainForm = Me\n\n        Startup.CheckCompatibility()\n\n        Startup.CreateLogger()\n\n        ' Create gui config load and save objects\n        Dim SettingsLoad As New Config.Settings.Load(Me)\n\n        ' Load GUI Configuration\n        SettingsLoad.Load()\n\n        Debug.Print(\"---------------------------\" \u0026 vbNewLine \u0026 \"[START] - \" \u0026 Now)\n\n        Startup.ParseCommandLineArgs()\n\n        ApplyLanguage()\n\n        AddHandler ThemeManager.ThemeChanged, AddressOf ApplyThemes\n        ApplyThemes()\n\n        fpChainedWindowHandle = SetClipboardViewer(Me.Handle)\n\n        MessageCollector = New Messages.Collector(Windows.errorsForm)\n\n        WindowList = New UI.Window.List\n\n        Tools.IeBrowserEmulation.Register()\n\n        Startup.GetConnectionIcons()\n        GetExtApps()\n        Windows.treePanel.Focus()\n\n        Tree.Node.TreeView = Windows.treeForm.tvConnections\n\n        If My.Settings.FirstStart And _\n                Not My.Settings.LoadConsFromCustomLocation And _\n                Not IO.File.Exists(GetStartupConnectionFileName()) Then\n            NewConnections(GetStartupConnectionFileName())\n        End If\n\n        'LoadCredentials()\n        LoadConnections()\n        If Not IsConnectionsFileLoaded Then\n            Application.Exit()\n            Return\n        End If\n\n        PuttySessions.StartWatcher()\n\n        If My.Settings.StartupComponentsCheck Then\n            Windows.Show(UI.Window.Type.ComponentsCheck)\n        End If\n\n#If PORTABLE Then\n        mMenInfoAnnouncements.Visible = False\n        mMenToolsUpdate.Visible = False\n        mMenInfoSep2.Visible = False\n#End If\n\n        Startup.CreateSQLUpdateHandlerAndStartTimer()\n\n        AddSysMenuItems()\n        AddHandler Microsoft.Win32.SystemEvents.DisplaySettingsChanged, AddressOf DisplayChanged\n\n        Me.Opacity = 1\n    End Sub\n\n    Private Sub ApplyLanguage()\n        mMenFile.Text = My.Language.strMenuFile\n        mMenFileNew.Text = My.Language.strMenuNewConnectionFile\n        mMenFileNewConnection.Text = My.Language.strNewConnection\n        mMenFileNewFolder.Text = My.Language.strNewFolder\n        mMenFileLoad.Text = My.Language.strMenuOpenConnectionFile\n        mMenFileSave.Text = My.Language.strMenuSaveConnectionFile\n        mMenFileSaveAs.Text = My.Language.strMenuSaveConnectionFileAs\n        mMenFileImportExport.Text = My.Language.strImportExport\n        ImportFromActiveDirectoryToolStripMenuItem.Text = My.Language.strImportAD\n        ImportFromPortScanToolStripMenuItem.Text = My.Language.strImportPortScan\n        ImportFromRDPFileToolStripMenuItem.Text = My.Language.strImportRDPFiles\n        ImportFromXMLFileToolStripMenuItem.Text = My.Language.strImportmRemoteXML\n        ExportToXMLFileToolStripMenuItem.Text = My.Language.strExportmRemoteXML\n        mMenFileExit.Text = My.Language.strMenuExit\n\n        mMenView.Text = My.Language.strMenuView\n        mMenViewAddConnectionPanel.Text = My.Language.strMenuAddConnectionPanel\n        mMenViewConnectionPanels.Text = My.Language.strMenuConnectionPanels\n        mMenViewConnections.Text = My.Language.strMenuConnections\n        mMenViewConfig.Text = My.Language.strMenuConfig\n        mMenViewSessions.Text = My.Language.strMenuSessions\n        mMenViewErrorsAndInfos.Text = My.Language.strMenuNotifications\n        mMenViewScreenshotManager.Text = My.Language.strScreenshots\n        mMenViewJumpTo.Text = My.Language.strMenuJumpTo\n        mMenViewJumpToConnectionsConfig.Text = My.Language.strMenuConnectionsAndConfig\n        mMenViewJumpToSessionsScreenshots.Text = My.Language.strMenuSessionsAndScreenshots\n        mMenViewJumpToErrorsInfos.Text = My.Language.strMenuNotifications\n        mMenViewResetLayout.Text = My.Language.strMenuResetLayout\n        mMenViewQuickConnectToolbar.Text = My.Language.strMenuQuickConnectToolbar\n        mMenViewExtAppsToolbar.Text = My.Language.strMenuExternalToolsToolbar\n        mMenViewFullscreen.Text = My.Language.strMenuFullScreen\n\n        mMenTools.Text = My.Language.strMenuTools\n        mMenToolsSSHTransfer.Text = My.Language.strMenuSSHFileTransfer\n        mMenToolsExternalApps.Text = My.Language.strMenuExternalTools\n        mMenToolsPortScan.Text = My.Language.strMenuPortScan\n        mMenToolsComponentsCheck.Text = My.Language.strComponentsCheck\n        mMenToolsUpdate.Text = My.Language.strMenuCheckForUpdates\n        mMenToolsOptions.Text = My.Language.strMenuOptions\n\n        mMenInfo.Text = My.Language.strMenuHelp\n        mMenInfoHelp.Text = My.Language.strMenuHelpContents\n        mMenInfoForum.Text = My.Language.strMenuSupportForum\n        mMenInfoBugReport.Text = My.Language.strMenuReportBug\n        mMenInfoDonate.Text = My.Language.strMenuDonate\n        mMenInfoWebsite.Text = My.Language.strMenuWebsite\n        mMenInfoAbout.Text = My.Language.strMenuAbout\n        mMenInfoAnnouncements.Text = My.Language.strMenuAnnouncements\n\n        lblQuickConnect.Text = My.Language.strLabelConnect\n        btnQuickyPlay.Text = My.Language.strMenuConnect\n        mMenQuickyCon.Text = My.Language.strMenuConnections\n\n        cMenToolbarShowText.Text = My.Language.strMenuShowText\n\n        ToolStripButton1.Text = My.Language.strConnect\n        ToolStripButton2.Text = My.Language.strScreenshot\n        ToolStripButton3.Text = My.Language.strRefresh\n\n        ToolStripSplitButton1.Text = My.Language.strSpecialKeys\n        ToolStripMenuItem1.Text = My.Language.strKeysCtrlAltDel\n        ToolStripMenuItem2.Text = My.Language.strKeysCtrlEsc\n    End Sub\n\n    Public Sub ApplyThemes()\n        With ThemeManager.ActiveTheme\n            pnlDock.DockBackColor = .WindowBackgroundColor\n            tsContainer.BackColor = .ToolbarBackgroundColor\n            tsContainer.ForeColor = .ToolbarTextColor\n            tsContainer.TopToolStripPanel.BackColor = .ToolbarBackgroundColor\n            tsContainer.TopToolStripPanel.ForeColor = .ToolbarTextColor\n            tsContainer.BottomToolStripPanel.BackColor = .ToolbarBackgroundColor\n            tsContainer.BottomToolStripPanel.ForeColor = .ToolbarTextColor\n            tsContainer.LeftToolStripPanel.BackColor = .ToolbarBackgroundColor\n            tsContainer.LeftToolStripPanel.ForeColor = .ToolbarTextColor\n            tsContainer.RightToolStripPanel.BackColor = .ToolbarBackgroundColor\n            tsContainer.RightToolStripPanel.ForeColor = .ToolbarTextColor\n            tsContainer.ContentPanel.BackColor = .ToolbarBackgroundColor\n            tsContainer.ContentPanel.ForeColor = .ToolbarTextColor\n            msMain.BackColor = .ToolbarBackgroundColor\n            msMain.ForeColor = .ToolbarTextColor\n            ApplyMenuColors(msMain.Items)\n            tsExternalTools.BackColor = .ToolbarBackgroundColor\n            tsExternalTools.ForeColor = .ToolbarTextColor\n            tsQuickConnect.BackColor = .ToolbarBackgroundColor\n            tsQuickConnect.ForeColor = .ToolbarTextColor\n        End With\n    End Sub\n\n    Private Shared Sub ApplyMenuColors(itemCollection As ToolStripItemCollection)\n        With ThemeManager.ActiveTheme\n            Dim menuItem As ToolStripMenuItem\n            For Each item As ToolStripItem In itemCollection\n                item.BackColor = .MenuBackgroundColor\n                item.ForeColor = .MenuTextColor\n\n                menuItem = TryCast(item, ToolStripMenuItem)\n                If menuItem IsNot Nothing Then\n                    ApplyMenuColors(menuItem.DropDownItems)\n                End If\n            Next\n        End With\n    End Sub\n\n    Private Sub frmMain_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n#If PORTABLE Then\n        Return\n#End If\n        If Not My.Settings.CheckForUpdatesAsked Then\n            Dim commandButtons() As String = {My.Language.strAskUpdatesCommandRecommended, My.Language.strAskUpdatesCommandCustom, My.Language.strAskUpdatesCommandAskLater}\n            cTaskDialog.ShowTaskDialogBox(Me, My.Application.Info.ProductName, My.Language.strAskUpdatesMainInstruction, String.Format(My.Language.strAskUpdatesContent, My.Application.Info.ProductName), \"\", \"\", \"\", \"\", String.Join(\"|\", commandButtons), eTaskDialogButtons.None, eSysIcons.Question, eSysIcons.Question)\n            If cTaskDialog.CommandButtonResult = 0 Or cTaskDialog.CommandButtonResult = 1 Then\n                My.Settings.CheckForUpdatesAsked = True\n            End If\n            If cTaskDialog.CommandButtonResult = 1 Then\n                Windows.ShowUpdatesTab()\n            End If\n            Return\n        End If\n\n        If Not My.Settings.CheckForUpdatesOnStartup Then Return\n\n        Dim nextUpdateCheck As Date = My.Settings.CheckForUpdatesLastCheck.Add(TimeSpan.FromDays(My.Settings.CheckForUpdatesFrequencyDays))\n        If My.Settings.UpdatePending Or Date.UtcNow \u003e nextUpdateCheck Then\n            If Not IsHandleCreated Then CreateHandle() ' Make sure the handle is created so that InvokeRequired returns the correct result\n            Startup.CheckForUpdate()\n            Startup.CheckForAnnouncement()\n        End If\n    End Sub\n\n    Private Sub frmMain_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing\n        If Not (WindowList Is Nothing OrElse WindowList.Count = 0) Then\n            Dim connectionWindow As UI.Window.Connection\n            Dim openConnections As Integer = 0\n            For Each window As UI.Window.Base In WindowList\n                connectionWindow = TryCast(window, UI.Window.Connection)\n                If connectionWindow IsNot Nothing Then\n                    openConnections = openConnections + connectionWindow.TabController.TabPages.Count\n                End If\n            Next\n\n            If openConnections \u003e 0 And _\n                    (My.Settings.ConfirmCloseConnection = ConfirmClose.All Or _\n                    (My.Settings.ConfirmCloseConnection = ConfirmClose.Multiple And openConnections \u003e 1) Or _\n                     My.Settings.ConfirmCloseConnection = ConfirmClose.Exit) Then\n                Dim result As DialogResult = cTaskDialog.MessageBox(Me, My.Application.Info.ProductName, My.Language.strConfirmExitMainInstruction, \"\", \"\", \"\", My.Language.strCheckboxDoNotShowThisMessageAgain, eTaskDialogButtons.YesNo, eSysIcons.Question, Nothing)\n                If cTaskDialog.VerificationChecked Then\n                    My.Settings.ConfirmCloseConnection = My.Settings.ConfirmCloseConnection - 1\n                End If\n                If result = DialogResult.No Then\n                    e.Cancel = True\n                    Return\n                End If\n            End If\n        End If\n\n        Shutdown.Cleanup()\n\n        _isClosing = True\n\n        If WindowList IsNot Nothing Then\n            For Each window As UI.Window.Base In WindowList\n                window.Close()\n            Next\n        End If\n\n        Shutdown.StartUpdate()\n\n        Debug.Print(\"[END] - \" \u0026 Now)\n    End Sub\n#End Region\n\n#Region \"Timer\"\n    Private Sub tmrAutoSave_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrAutoSave.Tick\n        MessageCollector.AddMessage(Messages.MessageClass.InformationMsg, \"Doing AutoSave\", True)\n        App.Runtime.SaveConnections()\n    End Sub\n#End Region\n\n#Region \"Ext Apps Toolbar\"\n    Private Sub cMenToolbarShowText_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cMenToolbarShowText.Click\n        SwitchToolBarText(Not cMenToolbarShowText.Checked)\n    End Sub\n\n    Public Sub AddExternalToolsToToolBar()\n        Try\n            For index As Integer = tsExternalTools.Items.Count - 1 To 0 Step -1\n                tsExternalTools.Items(index).Dispose()\n            Next\n            tsExternalTools.Items.Clear()\n\n            Dim button As ToolStripButton\n            For Each tool As Tools.ExternalTool In ExternalTools\n                button = tsExternalTools.Items.Add(tool.DisplayName, tool.Image, AddressOf tsExtAppEntry_Click)\n\n                If cMenToolbarShowText.Checked = True Then\n                    button.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText\n                Else\n                    If button.Image IsNot Nothing Then\n                        button.DisplayStyle = ToolStripItemDisplayStyle.Image\n                    Else\n                        button.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText\n                    End If\n                End If\n\n                button.Tag = tool\n            Next\n        Catch ex As Exception\n            MessageCollector.AddMessage(Messages.MessageClass.ErrorMsg, String.Format(My.Language.strErrorAddExternalToolsToToolBarFailed, ex.Message), True)\n        End Try\n    End Sub\n\n    Private Sub tsExtAppEntry_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)\n        Dim extA As Tools.ExternalTool = sender.Tag\n\n        If Tree.Node.GetNodeType(Tree.Node.SelectedNode) = Tree.Node.Type.Connection Or _\n           Tree.Node.GetNodeType(Tree.Node.SelectedNode) = Tree.Node.Type.PuttySession Then\n            extA.Start(Tree.Node.SelectedNode.Tag)\n        Else\n            extA.Start()\n        End If\n    End Sub\n\n    Public Sub SwitchToolBarText(ByVal show As Boolean)\n        For Each tItem As ToolStripButton In tsExternalTools.Items\n            If show = True Then\n                tItem.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText\n            Else\n                If tItem.Image IsNot Nothing Then\n                    tItem.DisplayStyle = ToolStripItemDisplayStyle.Image\n                Else\n                    tItem.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText\n                End If\n            End If\n        Next\n\n        cMenToolbarShowText.Checked = show\n    End Sub\n#End Region\n\n#Region \"Menu\"\n#Region \"File\"\n    Private Sub mMenFile_DropDownOpening(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFile.DropDownOpening\n        Select Case Tree.Node.GetNodeType(Tree.Node.SelectedNode)\n            Case Tree.Node.Type.Root\n                mMenFileNewConnection.Enabled = True\n                mMenFileNewFolder.Enabled = True\n                mMenFileImportExport.Enabled = True\n                mMenFileDelete.Enabled = False\n                mMenFileRename.Enabled = True\n                mMenFileDuplicate.Enabled = False\n                mMenFileDelete.Text = My.Language.strMenuDelete\n                mMenFileRename.Text = My.Language.strMenuRenameFolder\n                mMenFileDuplicate.Text = My.Language.strMenuDuplicate\n            Case Tree.Node.Type.Container\n                mMenFileNewConnection.Enabled = True\n                mMenFileNewFolder.Enabled = True\n                mMenFileImportExport.Enabled = True\n                mMenFileDelete.Enabled = True\n                mMenFileRename.Enabled = True\n                mMenFileDuplicate.Enabled = True\n                mMenFileDelete.Text = My.Language.strMenuDeleteFolder\n                mMenFileRename.Text = My.Language.strMenuRenameFolder\n                mMenFileDuplicate.Text = My.Language.strMenuDuplicateFolder\n            Case Tree.Node.Type.Connection\n                mMenFileNewConnection.Enabled = True\n                mMenFileNewFolder.Enabled = True\n                mMenFileImportExport.Enabled = False\n                mMenFileDelete.Enabled = True\n                mMenFileRename.Enabled = True\n                mMenFileDuplicate.Enabled = True\n                mMenFileDelete.Text = My.Language.strMenuDeleteConnection\n                mMenFileRename.Text = My.Language.strMenuRenameConnection\n                mMenFileDuplicate.Text = My.Language.strMenuDuplicateConnection\n            Case Tree.Node.Type.PuttyRoot, Tree.Node.Type.PuttySession\n                mMenFileNewConnection.Enabled = False\n                mMenFileNewFolder.Enabled = False\n                mMenFileImportExport.Enabled = False\n                mMenFileDelete.Enabled = False\n                mMenFileRename.Enabled = False\n                mMenFileDuplicate.Enabled = False\n                mMenFileDelete.Text = My.Language.strMenuDelete\n                mMenFileRename.Text = My.Language.strMenuRename\n                mMenFileDuplicate.Text = My.Language.strMenuDuplicate\n            Case Else\n                mMenFileNewConnection.Enabled = True\n                mMenFileNewFolder.Enabled = True\n                mMenFileImportExport.Enabled = False\n                mMenFileDelete.Enabled = False\n                mMenFileRename.Enabled = False\n                mMenFileDuplicate.Enabled = False\n                mMenFileDelete.Text = My.Language.strMenuDelete\n                mMenFileRename.Text = My.Language.strMenuRename\n                mMenFileDuplicate.Text = My.Language.strMenuDuplicate\n        End Select\n    End Sub\n\n    Private Sub mMenFileNewConnection_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileNewConnection.Click\n        App.Runtime.Windows.treeForm.AddConnection()\n        SaveConnectionsBG()\n    End Sub\n\n    Private Sub mMenFileNewFolder_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileNewFolder.Click\n        App.Runtime.Windows.treeForm.AddFolder()\n        SaveConnectionsBG()\n    End Sub\n\n    Private Sub mMenFileNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileNew.Click\n        Dim lD As SaveFileDialog = Tools.Controls.ConnectionsSaveAsDialog\n        If lD.ShowDialog = System.Windows.Forms.DialogResult.OK Then\n            NewConnections(lD.FileName)\n        Else\n            Exit Sub\n        End If\n    End Sub\n\n    Private Sub mMenFileLoad_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileLoad.Click\n        If App.Runtime.IsConnectionsFileLoaded Then\n            Select Case MsgBox(My.Language.strSaveConnectionsFileBeforeOpeningAnother, MsgBoxStyle.YesNoCancel Or MsgBoxStyle.Question)\n                Case MsgBoxResult.Yes\n                    App.Runtime.SaveConnections()\n                Case MsgBoxResult.Cancel\n                    Exit Sub\n            End Select\n        End If\n\n        LoadConnections(True)\n    End Sub\n\n    Private Sub mMenFileSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileSave.Click\n        SaveConnections()\n    End Sub\n\n    Private Sub mMenFileSaveAs_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileSaveAs.Click\n        SaveConnectionsAs()\n    End Sub\n\n    Private Sub mMenFileExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileExit.Click\n        App.Runtime.Shutdown.Quit()\n    End Sub\n\n    Private Sub mMenFileDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileDelete.Click\n        Tree.Node.DeleteSelectedNode()\n        SaveConnectionsBG()\n    End Sub\n\n    Private Sub mMenFileRename_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileRename.Click\n        Tree.Node.StartRenameSelectedNode()\n        SaveConnectionsBG()\n    End Sub\n\n    Private Sub mMenFileDuplicate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenFileDuplicate.Click\n        Tree.Node.CloneNode(Tree.Node.SelectedNode)\n        SaveConnectionsBG()\n    End Sub\n#End Region\n\n#Region \"View\"\n    Private Sub mMenView_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs) Handles mMenView.DropDownOpening\n        Me.mMenViewConnections.Checked = Not Windows.treeForm.IsHidden\n        Me.mMenViewConfig.Checked = Not Windows.configForm.IsHidden\n        Me.mMenViewErrorsAndInfos.Checked = Not Windows.errorsForm.IsHidden\n        Me.mMenViewSessions.Checked = Not Windows.sessionsForm.IsHidden\n        Me.mMenViewScreenshotManager.Checked = Not Windows.screenshotForm.IsHidden\n\n        Me.mMenViewExtAppsToolbar.Checked = tsExternalTools.Visible\n        Me.mMenViewQuickConnectToolbar.Checked = tsQuickConnect.Visible\n\n        Me.mMenViewConnectionPanels.DropDownItems.Clear()\n\n        For i As Integer = 0 To WindowList.Count - 1\n            Dim tItem As New ToolStripMenuItem(WindowList(i).Text, WindowList(i).Icon.ToBitmap, AddressOf ConnectionPanelMenuItem_Click)\n            tItem.Tag = WindowList(i)\n\n            Me.mMenViewConnectionPanels.DropDownItems.Add(tItem)\n        Next\n\n        If Me.mMenViewConnectionPanels.DropDownItems.Count \u003e 0 Then\n            Me.mMenViewConnectionPanels.Enabled = True\n        Else\n            Me.mMenViewConnectionPanels.Enabled = False\n        End If\n    End Sub\n\n    Private Sub ConnectionPanelMenuItem_Click(ByVal sender As Object, ByVal e As System.EventArgs)\n        TryCast(sender.Tag, UI.Window.Base).Show(Me.pnlDock)\n        TryCast(sender.Tag, UI.Window.Base).Focus()\n    End Sub\n\n    Private Sub mMenViewSessions_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mMenViewSessions.Click\n        If Me.mMenViewSessions.Checked = False Then\n            Windows.sessionsPanel.Show(Me.pnlDock)\n            Me.mMenViewSessions.Checked = True\n        Else\n            Windows.sessionsPanel.Hide()\n            Me.mMenViewSessions.Checked = False\n        End If\n    End Sub\n\n    Private Sub mMenViewConnections_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewConnections.Click\n        If Me.mMenViewConnections.Checked = False Then\n            Windows.treePanel.Show(Me.pnlDock)\n            Me.mMenViewConnections.Checked = True\n        Else\n            Windows.treePanel.Hide()\n            Me.mMenViewConnections.Checked = False\n        End If\n    End Sub\n\n    Private Sub mMenViewConfig_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewConfig.Click\n        If Me.mMenViewConfig.Checked = False Then\n            Windows.configPanel.Show(Me.pnlDock)\n            Me.mMenViewConfig.Checked = True\n        Else\n            Windows.configPanel.Hide()\n            Me.mMenViewConfig.Checked = False\n        End If\n    End Sub\n\n    Private Sub mMenViewErrorsAndInfos_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewErrorsAndInfos.Click\n        If Me.mMenViewErrorsAndInfos.Checked = False Then\n            Windows.errorsPanel.Show(Me.pnlDock)\n            Me.mMenViewErrorsAndInfos.Checked = True\n        Else\n            Windows.errorsPanel.Hide()\n            Me.mMenViewErrorsAndInfos.Checked = False\n        End If\n    End Sub\n\n    Private Sub mMenViewScreenshotManager_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewScreenshotManager.Click\n        If Me.mMenViewScreenshotManager.Checked = False Then\n            Windows.screenshotPanel.Show(Me.pnlDock)\n            Me.mMenViewScreenshotManager.Checked = True\n        Else\n            Windows.screenshotPanel.Hide()\n            Me.mMenViewScreenshotManager.Checked = False\n        End If\n    End Sub\n\n    Private Sub mMenViewJumpToConnectionsConfig_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mMenViewJumpToConnectionsConfig.Click\n        If pnlDock.ActiveContent Is Windows.treePanel Then\n            Windows.configForm.Activate()\n        Else\n            Windows.treeForm.Activate()\n        End If\n    End Sub\n\n    Private Sub mMenViewJumpToSessionsScreenshots_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mMenViewJumpToSessionsScreenshots.Click\n        If pnlDock.ActiveContent Is Windows.sessionsPanel Then\n            Windows.screenshotForm.Activate()\n        Else\n            Windows.sessionsForm.Activate()\n        End If\n    End Sub\n\n    Private Sub mMenViewJumpToErrorsInfos_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles mMenViewJumpToErrorsInfos.Click\n        Windows.errorsForm.Activate()\n    End Sub\n\n    Private Sub mMenViewResetLayout_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewResetLayout.Click\n        If MsgBox(My.Language.strConfirmResetLayout, MsgBoxStyle.Question Or MsgBoxStyle.YesNo) = MsgBoxResult.Yes Then\n            App.Runtime.Startup.SetDefaultLayout()\n        End If\n    End Sub\n\n    Private Sub mMenViewAddConnectionPanel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewAddConnectionPanel.Click\n        AddPanel()\n    End Sub\n\n    Private Sub mMenViewExtAppsToolbar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewExtAppsToolbar.Click\n        If mMenViewExtAppsToolbar.Checked = False Then\n            tsExternalTools.Visible = True\n            mMenViewExtAppsToolbar.Checked = True\n        Else\n            tsExternalTools.Visible = False\n            mMenViewExtAppsToolbar.Checked = False\n        End If\n    End Sub\n\n    Private Sub mMenViewQuickConnectToolbar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewQuickConnectToolbar.Click\n        If mMenViewQuickConnectToolbar.Checked = False Then\n            tsQuickConnect.Visible = True\n            mMenViewQuickConnectToolbar.Checked = True\n        Else\n            tsQuickConnect.Visible = False\n            mMenViewQuickConnectToolbar.Checked = False\n        End If\n    End Sub\n\n    Public Fullscreen As New Tools.Misc.Fullscreen(Me)\n    Private Sub mMenViewFullscreen_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenViewFullscreen.Click\n        Fullscreen.Value = Not Fullscreen.Value\n        mMenViewFullscreen.Checked = Fullscreen.Value\n    End Sub\n#End Region\n\n#Region \"Tools\"\n    Private Sub mMenToolsUpdate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsUpdate.Click\n        App.Runtime.Windows.Show(UI.Window.Type.Update)\n    End Sub\n\n    Private Sub mMenToolsSSHTransfer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsSSHTransfer.Click\n        App.Runtime.Windows.Show(UI.Window.Type.SSHTransfer)\n    End Sub\n\n    Private Sub mMenToolsUVNCSC_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsUVNCSC.Click\n        App.Runtime.Windows.Show(UI.Window.Type.UltraVNCSC)\n    End Sub\n\n    Private Sub mMenToolsExternalApps_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsExternalApps.Click\n        App.Runtime.Windows.Show(UI.Window.Type.ExternalApps)\n    End Sub\n\n    Private Sub mMenToolsPortScan_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsPortScan.Click\n        App.Runtime.Windows.Show(UI.Window.Type.PortScan, Tools.PortScan.PortScanMode.Normal)\n    End Sub\n\n    Private Sub mMenToolsComponentsCheck_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsComponentsCheck.Click\n        App.Runtime.Windows.Show(UI.Window.Type.ComponentsCheck)\n    End Sub\n\n    Private Sub mMenToolsOptions_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenToolsOptions.Click\n        App.Runtime.Windows.Show(UI.Window.Type.Options)\n    End Sub\n#End Region\n\n#Region \"Quick Connect\"\n    Private Sub btnQuickyPlay_ButtonClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnQuickyPlay.ButtonClick\n        CreateQuicky(QuickyText)\n    End Sub\n\n    Private Sub btnQuickyPlay_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnQuickyPlay.DropDownOpening\n        CreateQuickyButtons()\n    End Sub\n\n    Private Sub CreateQuickyButtons()\n        Try\n            btnQuickyPlay.DropDownItems.Clear()\n\n            For Each fI As FieldInfo In GetType(mRemoteNG.Connection.Protocol.Protocols).GetFields\n                If fI.Name \u003c\u003e \"value__\" And fI.Name \u003c\u003e \"NONE\" And fI.Name \u003c\u003e \"IntApp\" Then\n                    Dim nBtn As New ToolStripMenuItem\n                    nBtn.Text = fI.Name\n                    btnQuickyPlay.DropDownItems.Add(nBtn)\n                    AddHandler nBtn.Click, AddressOf QuickyProtocolButton_Click\n                End If\n            Next\n        Catch ex As Exception\n            MessageCollector.AddMessage(Messages.MessageClass.ErrorMsg, \"CreateButtons (frmMain) failed\" \u0026 vbNewLine \u0026 ex.Message, True)\n        End Try\n    End Sub\n\n    Private Sub QuickyProtocolButton_Click(ByVal sender As Object, ByVal e As System.EventArgs)\n        Try\n            Dim conI As Connection.Info = CreateQuicky(QuickyText, Tools.Misc.StringToEnum(GetType(mRemoteNG.Connection.Protocol.Protocols), sender.Text))\n\n            If conI.Port = 0 Then\n                conI.SetDefaultPort()\n\n                If mRemoteNG.Connection.QuickConnect.History.Exists(conI.Hostname) = False Then\n                    mRemoteNG.Connection.QuickConnect.History.Add(conI.Hostname)\n                End If\n            Else\n                If mRemoteNG.Connection.QuickConnect.History.Exists(conI.Hostname) = False Then\n                    mRemoteNG.Connection.QuickConnect.History.Add(conI.Hostname \u0026 \":\" \u0026 conI.Port)\n                End If\n            End If\n\n            App.Runtime.OpenConnection(conI, mRemoteNG.Connection.Info.Force.DoNotJump)\n        Catch ex As Exception\n            MessageCollector.AddMessage(Messages.MessageClass.ErrorMsg, \"QuickyProtocolButton_Click (frmMain) failed\" \u0026 vbNewLine \u0026 ex.Message, True)\n        End Try\n    End Sub\n\n    Private Sub cmbQuickConnect_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles cmbQuickConnect.KeyDown\n        If e.KeyCode = Keys.Enter Then\n            CreateQuicky(QuickyText)\n        End If\n    End Sub\n\n    Private Sub lblQuickConnect_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lblQuickConnect.Click\n        Me.cmbQuickConnect.Focus()\n    End Sub\n\n    Private Function QuickyText() As String\n        Dim txt As String\n\n        txt = cmbQuickConnect.Text\n\n        If txt.StartsWith(\" \") Or txt.EndsWith(\" \") Then\n            txt = txt.Replace(\" \", \"\")\n            cmbQuickConnect.Text = txt\n        End If\n\n        Return txt\n    End Function\n#End Region\n\n#Region \"Info\"\n    Private Sub mMenInfoHelp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoHelp.Click\n        App.Runtime.Windows.Show(UI.Window.Type.Help)\n    End Sub\n\n    Private Sub mMenInfoForum_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoForum.Click\n        App.Runtime.GoToForum()\n    End Sub\n\n    Private Sub mMenInfoBugReport_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoBugReport.Click\n        App.Runtime.GoToBugs()\n    End Sub\n\n    Private Sub mMenInfoWebsite_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoWebsite.Click\n        App.Runtime.GoToWebsite()\n    End Sub\n\n    Private Sub mMenInfoDonate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoDonate.Click\n        App.Runtime.GoToDonate()\n    End Sub\n\n    Private Sub mMenInfoAnnouncements_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoAnnouncements.Click\n        App.Runtime.Windows.Show(UI.Window.Type.Announcement)\n    End Sub\n\n    Private Sub mMenInfoAbout_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mMenInfoAbout.Click\n        App.Runtime.Windows.Show(UI.Window.Type.About)\n    End Sub\n#End Region\n#End Region\n\n#Region \"Connections DropDown\"\n    Private Sub mMenQuickyCon_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs) Handles mMenQuickyCon.DropDownOpening\n        mMenQuickyCon.DropDownItems.Clear()\n\n        For Each tNode As TreeNode In App.Runtime.Windows.treeForm.tvConnections.Nodes\n            AddNodeToMenu(tNode.Nodes, mMenQuickyCon)\n        Next\n    End Sub\n\n    Private Shared Sub AddNodeToMenu(ByVal tnc As TreeNodeCollection, ByVal menToolStrip As ToolStripMenuItem)\n        Try\n            For Each tNode As TreeNode In tnc\n                Dim tMenItem As New ToolStripMenuItem()\n                tMenItem.Text = tNode.Text\n                tMenItem.Tag = tNode\n\n                If Tree.Node.GetNodeType(tNode) = Tree.Node.Type.Container Then\n                    tMenItem.Image = My.Resources.Folder\n                    tMenItem.Tag = tNode.Tag\n\n                    menToolStrip.DropDownItems.Add(tMenItem)\n                    AddNodeToMenu(tNode.Nodes, tMenItem)\n                ElseIf Tree.Node.GetNodeType(tNode) = Tree.Node.Type.Connection Or _\n                       Tree.Node.GetNodeType(tNode) = Tree.Node.Type.PuttySession Then\n                    tMenItem.Image = Windows.treeForm.imgListTree.Images(tNode.ImageIndex)\n                    tMenItem.Tag = tNode.Tag\n\n                    menToolStrip.DropDownItems.Add(tMenItem)\n                End If\n\n                AddHandler tMenItem.MouseUp, AddressOf ConMenItem_MouseUp\n            Next\n        Catch ex As Exception\n            MessageCollector.AddMessage(Messages.MessageClass.ErrorMsg, \"AddNodeToMenu failed\" \u0026 vbNewLine \u0026 ex.Message, True)\n        End Try\n    End Sub\n\n    Private Shared Sub ConMenItem_MouseUp(ByVal sender As System.Object, ByVal e As System.Windows.Forms.MouseEventArgs)\n        If e.Button = MouseButtons.Left Then\n            If TypeOf sender.Tag Is Connection.Info Then\n                App.Runtime.OpenConnection(sender.Tag)\n            End If\n        End If\n    End Sub\n#End Region\n\n#Region \"Window Overrides and DockPanel Stuff\"\n    Private _inSizeMove As Boolean = False\n    Private Sub frmMain_ResizeBegin(ByVal sender As Object, ByVal e As EventArgs) Handles Me.ResizeBegin\n        _inSizeMove = True\n    End Sub\n\n    Private Sub frmMain_Resize(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Resize\n        If WindowState = FormWindowState.Minimized Then\n            If My.Settings.MinimizeToTray Then\n                If NotificationAreaIcon Is Nothing Then\n                    NotificationAreaIcon = New Tools.Controls.NotificationAreaIcon()\n                End If\n                Hide()\n            End If\n        Else\n            PreviousWindowState = WindowState\n        End If\n    End Sub\n\n    Private Sub frmMain_ResizeEnd(ByVal sender As Object, ByVal e As EventArgs) Handles Me.ResizeEnd\n        _inSizeMove = False\n\n        ' This handles activations from clicks that started a size/move operation\n        ActivateConnection()\n    End Sub\n\n    Private _inMouseActivate As Boolean = False\n    Protected Overloads Overrides Sub WndProc(ByRef m As Message)\n        Try\n            Select Case m.Msg\n                Case WM_MOUSEACTIVATE\n                    _inMouseActivate = True\n                Case WM_ACTIVATEAPP\n                    _inMouseActivate = False\n                Case WM_ACTIVATE\n                    ' Ingore this message if it wasn't triggered by a click\n                    If Not LOWORD(m.WParam) = WA_CLICKACTIVE Then Exit Select\n\n                    Dim control As Control = FromChildHandle(WindowFromPoint(MousePosition))\n                    If Not IsNothing(control) Then\n                        ' Let TreeViews and ComboBoxes get focus but don't simulate a mouse event\n                        If TypeOf control Is TreeView Or TypeOf control Is ComboBox Then Exit Select\n\n                        If control.CanSelect Or TypeOf control Is MenuStrip Or TypeOf control Is ToolStrip Or TypeOf control Is Magic.Controls.TabControl Or TypeOf control Is Magic.Controls.InertButton Then\n                            ' Simulate a mouse event since one wasn't generated by Windows\n                            Dim clientMousePosition As Point = control.PointToClient(MousePosition)\n                            SendMessage(control.Handle, WM_LBUTTONDOWN, MK_LBUTTON, MAKELPARAM(clientMousePosition.X, clientMousePosition.Y))\n\n                            control.Focus()\n                            Exit Select\n                        End If\n                    End If\n\n                    ' This handles activations from clicks that did not start a size/move operation\n                    ActivateConnection()\n                Case WM_WINDOWPOSCHANGED\n                    ' Ignore this message if the window wasn't activated\n                    Dim windowPos As WINDOWPOS = Marshal.PtrToStructure(m.LParam, GetType(WINDOWPOS))\n                    If (Not (windowPos.flags And SWP_NOACTIVATE) = 0) Then Exit Select\n\n                    ' This handles all other activations\n                    If Not _inMouseActivate And Not _inSizeMove Then ActivateConnection()\n                Case WM_SYSCOMMAND\n                    For i As Integer = 0 To SysMenSubItems.Length - 1\n                        If SysMenSubItems(i) = m.WParam Then\n                            Screens.SendFormToScreen(Screen.AllScreens(i))\n                            Exit For\n                        End If\n                    Next\n                Case WM_DRAWCLIPBOARD\n                    SendMessage(fpChainedWindowHandle, m.Msg, m.LParam, m.WParam)\n                    RaiseEvent clipboardchange()\n                Case WM_CHANGECBCHAIN\n                    'Send to the next window\n                    SendMessage(fpChainedWindowHandle, m.Msg, m.LParam, m.WParam)\n                    fpChainedWindowHandle = m.LParam\n            End Select\n        Catch ex As Exception\n        End Try\n\n        MyBase.WndProc(m)\n    End Sub\n\n    Private Sub ActivateConnection()\n        If TypeOf pnlDock.ActiveDocument Is UI.Window.Connection Then\n            Dim cW As UI.Window.Connection = pnlDock.ActiveDocument\n            If cW.TabController.SelectedTab IsNot Nothing Then\n                Dim tab As Magic.Controls.TabPage = cW.TabController.SelectedTab\n                Dim ifc As Connection.InterfaceControl = TryCast(tab.Tag, Connection.InterfaceControl)\n                ifc.Protocol.Focus()\n                TryCast(ifc.FindForm, UI.Window.Connection).RefreshIC()\n            End If\n        End If\n    End Sub\n\n    Private Sub pnlDock_ActiveDocumentChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlDock.ActiveDocumentChanged\n        ActivateConnection()\n    End Sub\n\n    Public Sub ShowHidePanelTabs(Optional closingDocument As DockContent = Nothing)\n        Dim newDocumentStyle As DocumentStyle = pnlDock.DocumentStyle\n\n        If My.Settings.AlwaysShowPanelTabs Then\n            newDocumentStyle = DocumentStyle.DockingWindow ' Show the panel tabs\n        Else\n            Dim nonConnectionPanelCount As Integer = 0\n            For Each document As DockContent In pnlDock.Documents\n                If (closingDocument Is Nothing OrElse document IsNot closingDocument) And Not TypeOf document Is UI.Window.Connection Then\n                    nonConnectionPanelCount = nonConnectionPanelCount + 1\n                End If\n            Next\n\n            If nonConnectionPanelCount = 0 Then\n                newDocumentStyle = DocumentStyle.DockingSdi ' Hide the panel tabs\n            Else\n                newDocumentStyle = DocumentStyle.DockingWindow ' Show the panel tabs\n            End If\n        End If\n\n        If Not pnlDock.DocumentStyle = newDocumentStyle Then\n            pnlDock.DocumentStyle = newDocumentStyle\n            pnlDock.Size = New Size(1, 1)\n        End If\n    End Sub\n#End Region\n\n#Region \"Screen Stuff\"\n    Private Sub DisplayChanged(ByVal sender As Object, ByVal e As System.EventArgs)\n        ResetSysMenuItems()\n        AddSysMenuItems()\n    End Sub\n\n    Private SysMenSubItems(50) As Integer\n    Private Shared Sub ResetSysMenuItems()\n        SystemMenu.Reset()\n    End Sub\n\n    Private Sub AddSysMenuItems()\n        SystemMenu = New Tools.SystemMenu(Me.Handle)\n        Dim popMen As IntPtr = SystemMenu.CreatePopupMenuItem()\n\n        For i As Integer = 0 To Screen.AllScreens.Length - 1\n            SysMenSubItems(i) = 200 + i\n            SystemMenu.AppendMenuItem(popMen, Tools.SystemMenu.Flags.MF_STRING, SysMenSubItems(i), My.Language.strScreen \u0026 \" \" \u0026 i + 1)\n        Next\n\n        SystemMenu.InsertMenuItem(SystemMenu.SystemMenuHandle, 0, Tools.SystemMenu.Flags.MF_POPUP Or Tools.SystemMenu.Flags.MF_BYPOSITION, popMen, My.Language.strSendTo)\n        SystemMenu.InsertMenuItem(SystemMenu.SystemMenuHandle, 1, Tools.SystemMenu.Flags.MF_BYPOSITION Or Tools.SystemMenu.Flags.MF_SEPARATOR, IntPtr.Zero, Nothing)\n    End Sub\n#End Region\nEnd Class\n"}